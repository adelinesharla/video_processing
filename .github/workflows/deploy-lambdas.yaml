name: Deploy Lambda Functions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  REGION_DEFAULT: "us-east-1"
  PROJECT_NAME: "video-processor"
  LAMBDA_BUCKET: "lambda-artifacts-video-processor"
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          for lambda in lambda/*/; do
            cd $lambda
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-mock
            cd ../..
          done
      - name: Run tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh

  build-and-deploy:
    name: Build and Deploy Lambdas
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgstreamer1.0-0 \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good
      
      - name: Build and upload Lambda packages
        run: |
          # Function to optimize pip installations
          optimize_pip_install() {
            local requirements_file=$1
            local target_dir=$2
            
            # Install only required packages without dev dependencies
            pip install \
              --no-cache-dir \
              --no-deps \
              --python-version 3.9 \
              --platform manylinux2014_x86_64 \
              --only-binary=:all: \
              --target "${target_dir}" \
              -r "${requirements_file}"
            
            # Remove unnecessary files
            find "${target_dir}" -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
            find "${target_dir}" -type d -name "test" -exec rm -rf {} + 2>/dev/null || true
            find "${target_dir}" -type f -name "*.pyc" -delete
            find "${target_dir}" -type f -name "*.pyo" -delete
            find "${target_dir}" -type f -name "*.pyd" -delete
            find "${target_dir}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${target_dir}" -type f -name "*.so" ! -name "_opencv_*" -delete

            # Remove documentation and other non-essential files
            find "${target_dir}" -type d -name "docs" -exec rm -rf {} + 2>/dev/null || true
            find "${target_dir}" -type d -name "examples" -exec rm -rf {} + 2>/dev/null || true
            find "${target_dir}" -type f -name "*.html" -delete
            find "${target_dir}" -type f -name "*.txt" ! -name "requirements.txt" -delete
            find "${target_dir}" -type f -name "*.md" -delete
            
            # If opencv is installed, keep only essential binaries
            if [ -d "${target_dir}/cv2" ]; then
              find "${target_dir}/cv2" -type f ! -name "*.so" ! -name "__init__.py" -delete
            fi
          }

          # Function to create Lambda package
          create_lambda_package() {
            local lambda_name=$1
            local lambda_dir_name=$2
            local temp_dir=$(mktemp -d)
            local zip_file="${lambda_dir_name}.zip"
            
            echo "Creating package for ${lambda_name}..."
            
            # Install and optimize dependencies
            if [ -f "lambda/${lambda_dir_name}/requirements.txt" ]; then
              echo "Installing optimized dependencies..."
              optimize_pip_install "lambda/${lambda_dir_name}/requirements.txt" "${temp_dir}" || {
                echo "Failed to install dependencies for ${lambda_dir_name}"
                return 1
              }
            fi
            
            # Copy source code
            if [ -d "lambda/${lambda_dir_name}/src" ]; then
              echo "Copying source code..."
              cp -r "lambda/${lambda_dir_name}/src/"* "${temp_dir}/" || {
                echo "Failed to copy source code for ${lambda_dir_name}"
                return 1
              }
            else
              echo "Warning: No src directory found for ${lambda_dir_name}"
              return 1
            fi
            
            # Calculate package size before compression
            local size_before=$(du -sb "${temp_dir}" | cut -f1)
            echo "Package size before compression: $(( size_before / 1024 / 1024 )) MB"
            
            # Create optimized ZIP with maximum compression
            echo "Creating ZIP file..."
            (cd "${temp_dir}" && zip -9 --symlinks --quiet "${GITHUB_WORKSPACE}/${zip_file}" . -x "*.pyc" "*.pyo" "*.pyd" "__pycache__/*" "*.so" "test/*" "tests/*" "*.html" "*.txt" "*.md") || {
              echo "Failed to create ZIP for ${lambda_dir_name}"
              return 1
            }
            
            # Calculate ZIP size
            local zip_size=$(stat -f%z "${GITHUB_WORKSPACE}/${zip_file}" 2>/dev/null || stat -c%s "${GITHUB_WORKSPACE}/${zip_file}")
            echo "ZIP file size: $(( zip_size / 1024 / 1024 )) MB"
            
            # Check if ZIP size exceeds Lambda limits
            if [ ${zip_size} -gt 250000000 ]; then
              echo "Error: Package size exceeds Lambda limit of 250MB"
              return 1
            fi
            
            # Upload to S3
            echo "Uploading to S3..."
            aws s3 cp "${zip_file}" "s3://${LAMBDA_BUCKET}/${lambda_dir_name}/${zip_file}" || {
              echo "Failed to upload ${lambda_dir_name} to S3"
              return 1
            }
            
            # Update Lambda function
            aws lambda update-function-code \
              --function-name "${PROJECT_NAME}-${lambda_name}" \
              --s3-bucket "${LAMBDA_BUCKET}" \
              --s3-key "${lambda_dir_name}/${zip_file}" || {
              echo "Failed to update Lambda function ${lambda_name}"
              return 1
            }
            
            echo "Successfully processed ${lambda_name}"
          }
          
          create_lambda_package "video-processor" "video_processor" || {
            echo "Failed to process video-processor"
            exit 1
          }
          
          create_lambda_package "upload-handler" "upload_handler" || {
            echo "Failed to process upload-handler"
            exit 1
          }
          
          create_lambda_package "notification-handler" "notification_handler" || {
            echo "Failed to process notification-handler"
            exit 1
          }
      
      - name: Verify deployments
        run: |
          FUNCTIONS=("video-processor" "upload-handler" "notification-handler")
          for lambda in "${FUNCTIONS[@]}"; do
            echo "Verifying ${lambda}..."
            aws lambda get-function --function-name "${PROJECT_NAME}-${lambda}" || {
              echo "Failed to verify ${lambda}"
              exit 1
            }
          done